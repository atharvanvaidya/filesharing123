TruffleContract {
  constructor:
   { [Function: TruffleContract]
     _static_methods:
      { setProvider: [Function: setProvider],
        new: [Function: new],
        at: [Function: at],
        deployed: [Function: deployed],
        defaults: [Function: defaults],
        hasNetwork: [Function: hasNetwork],
        isDeployed: [Function: isDeployed],
        detectNetwork: [Function: detectNetwork],
        setNetwork: [Function: setNetwork],
        resetAddress: [Function: resetAddress],
        link: [Function: link],
        clone: [Function: clone],
        addProp: [Function: addProp],
        toJSON: [Function: toJSON] },
     _properties:
      { contract_name: [Object],
        contractName: [Object],
        abi: [Object],
        network: [Function: network],
        networks: [Function: networks],
        address: [Object],
        transactionHash: [Object],
        links: [Function: links],
        events: [Function: events],
        binary: [Function: binary],
        deployedBinary: [Function: deployedBinary],
        unlinked_binary: [Object],
        bytecode: [Object],
        deployedBytecode: [Object],
        sourceMap: [Object],
        deployedSourceMap: [Object],
        source: [Object],
        sourcePath: [Object],
        legacyAST: [Object],
        ast: [Object],
        compiler: [Object],
        schema_version: [Function: schema_version],
        schemaVersion: [Function: schemaVersion],
        updated_at: [Function: updated_at],
        updatedAt: [Function: updatedAt] },
     _property_values: {},
     _json:
      { contractName: 'ToDo',
        abi: [Array],
        bytecode:
         '0x608060405234801561001057600080fd5b506000808190555061086d806100276000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063138596881461005c5780631d65e77e14610087578063292a4585146100c8575b600080fd5b34801561006857600080fd5b506100716100f1565b60405161007e91906106b4565b60405180910390f35b34801561009357600080fd5b506100ae60048036036100a991908101906105dc565b610149565b6040516100bf9594939291906106d6565b60405180910390f35b3480156100d457600080fd5b506100ef60048036036100ea9190810190610570565b61032a565b005b6060600180548060200260200160405190810160405280929190818152602001828054801561013f57602002820191906000526020600020905b81548152602001906001019080831161012b575b5050505050905090565b60008060608060008560006002600083815260200190815260200160002060000154141561017657600080fd5b866002600089815260200190815260200160002060010154600260008a8152602001908152602001600020600201600260008b8152602001908152602001600020600301600260008c815260200190815260200160002060040160009054906101000a900460ff16828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102735780601f1061024857610100808354040283529160200191610273565b820191906000526020600020905b81548152906001019060200180831161025657829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561030f5780601f106102e45761010080835404028352916020019161030f565b820191906000526020600020905b8154815290600101906020018083116102f257829003601f168201915b50505050509150955095509550955095505091939590929450565b600080815480929190600101919050555060a0604051908101604052806000548152602001428152602001838152602001828152602001600015158152506002600080548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906103ac929190610461565b5060608201518160030190805190602001906103c9929190610461565b5060808201518160040160006101000a81548160ff021916908315150217905550905050600160005490806001815401808255809150509060018203906000526020600020016000909192909190915055507fb322bdd3250d405f7845d27fa1f0753f8f7e18e40886bc254b89005c3e9c032460005442848460006040516104559594939291906106d6565b60405180910390a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104a257805160ff19168380011785556104d0565b828001600101855582156104d0579182015b828111156104cf5782518255916020019190600101906104b4565b5b5090506104dd91906104e1565b5090565b61050391905b808211156104ff5760008160009055506001016104e7565b5090565b90565b600082601f830112151561051957600080fd5b813561052c61052782610764565b610737565b9150808252602083016020830185838301111561054857600080fd5b6105538382846107e0565b50505092915050565b600061056882356107d6565b905092915050565b6000806040838503121561058357600080fd5b600083013567ffffffffffffffff81111561059d57600080fd5b6105a985828601610506565b925050602083013567ffffffffffffffff8111156105c657600080fd5b6105d285828601610506565b9150509250929050565b6000602082840312156105ee57600080fd5b60006105fc8482850161055c565b91505092915050565b60006106108261079d565b80845260208401935061062283610790565b60005b82811015610654576106388683516106a5565b610641826107b3565b9150602086019550600181019050610625565b50849250505092915050565b610669816107c0565b82525050565b600061067a826107a8565b80845261068e8160208601602086016107ef565b61069781610822565b602085010191505092915050565b6106ae816107cc565b82525050565b600060208201905081810360008301526106ce8184610605565b905092915050565b600060a0820190506106eb60008301886106a5565b6106f860208301876106a5565b818103604083015261070a818661066f565b9050818103606083015261071e818561066f565b905061072d6080830184610660565b9695505050505050565b6000604051905081810181811067ffffffffffffffff8211171561075a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561077b57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561080d5780820151818401526020810190506107f2565b8381111561081c576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058205be712311077a8e4ca1637de5ef168d1fba506ba5de6a044bbf553a37e361a5e6c6578706572696d656e74616cf50037',
        deployedBytecode:
         '0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063138596881461005c5780631d65e77e14610087578063292a4585146100c8575b600080fd5b34801561006857600080fd5b506100716100f1565b60405161007e91906106b4565b60405180910390f35b34801561009357600080fd5b506100ae60048036036100a991908101906105dc565b610149565b6040516100bf9594939291906106d6565b60405180910390f35b3480156100d457600080fd5b506100ef60048036036100ea9190810190610570565b61032a565b005b6060600180548060200260200160405190810160405280929190818152602001828054801561013f57602002820191906000526020600020905b81548152602001906001019080831161012b575b5050505050905090565b60008060608060008560006002600083815260200190815260200160002060000154141561017657600080fd5b866002600089815260200190815260200160002060010154600260008a8152602001908152602001600020600201600260008b8152602001908152602001600020600301600260008c815260200190815260200160002060040160009054906101000a900460ff16828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102735780601f1061024857610100808354040283529160200191610273565b820191906000526020600020905b81548152906001019060200180831161025657829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561030f5780601f106102e45761010080835404028352916020019161030f565b820191906000526020600020905b8154815290600101906020018083116102f257829003601f168201915b50505050509150955095509550955095505091939590929450565b600080815480929190600101919050555060a0604051908101604052806000548152602001428152602001838152602001828152602001600015158152506002600080548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906103ac929190610461565b5060608201518160030190805190602001906103c9929190610461565b5060808201518160040160006101000a81548160ff021916908315150217905550905050600160005490806001815401808255809150509060018203906000526020600020016000909192909190915055507fb322bdd3250d405f7845d27fa1f0753f8f7e18e40886bc254b89005c3e9c032460005442848460006040516104559594939291906106d6565b60405180910390a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104a257805160ff19168380011785556104d0565b828001600101855582156104d0579182015b828111156104cf5782518255916020019190600101906104b4565b5b5090506104dd91906104e1565b5090565b61050391905b808211156104ff5760008160009055506001016104e7565b5090565b90565b600082601f830112151561051957600080fd5b813561052c61052782610764565b610737565b9150808252602083016020830185838301111561054857600080fd5b6105538382846107e0565b50505092915050565b600061056882356107d6565b905092915050565b6000806040838503121561058357600080fd5b600083013567ffffffffffffffff81111561059d57600080fd5b6105a985828601610506565b925050602083013567ffffffffffffffff8111156105c657600080fd5b6105d285828601610506565b9150509250929050565b6000602082840312156105ee57600080fd5b60006105fc8482850161055c565b91505092915050565b60006106108261079d565b80845260208401935061062283610790565b60005b82811015610654576106388683516106a5565b610641826107b3565b9150602086019550600181019050610625565b50849250505092915050565b610669816107c0565b82525050565b600061067a826107a8565b80845261068e8160208601602086016107ef565b61069781610822565b602085010191505092915050565b6106ae816107cc565b82525050565b600060208201905081810360008301526106ce8184610605565b905092915050565b600060a0820190506106eb60008301886106a5565b6106f860208301876106a5565b818103604083015261070a818661066f565b9050818103606083015261071e818561066f565b905061072d6080830184610660565b9695505050505050565b6000604051905081810181811067ffffffffffffffff8211171561075a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561077b57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561080d5780820151818401526020810190506107f2565b8381111561081c576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058205be712311077a8e4ca1637de5ef168d1fba506ba5de6a044bbf553a37e361a5e6c6578706572696d656e74616cf50037',
        sourceMap:
         '60:1010:1:-;;;309:46;8:9:-1;5:2;;;30:1;27;20:12;5:2;309:46:1;349:1;336:10;:14;;;;60:1010;;;;;;',
        deployedSourceMap:
         '60:1010:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;894:77;;8:9:-1;5:2;;;30:1;27;20:12;5:2;894:77:1;;;;;;;;;;;;;;;;;;;;599:289;;8:9:-1;5:2;;;30:1;27;20:12;5:2;599:289:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;359:236;;8:9:-1;5:2;;;30:1;27;20:12;5:2;359:236:1;;;;;;;;;;;;;;;;;;;894:77;939:6;959:7;952:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;894:77;:::o;599:289::-;676:4;688;700:6;714;728:4;636:2;1028:1;1012:5;:9;1018:2;1012:9;;;;;;;;;;;:12;;;:17;1009:48;;;1042:8;;;1009:48;764:2;777:5;:9;783:2;777:9;;;;;;;;;;;:14;;;802:5;:9;808:2;802:9;;;;;;;;;;;:17;;830:5;:9;836:2;830:9;;;;;;;;;;;:16;;857:5;:9;863:2;857:9;;;;;;;;;;;:14;;;;;;;;;;;;747:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;599:289;;;;;;;;:::o;359:236::-;423:10;;:12;;;;;;;;;;;;;461:43;;;;;;;;;466:10;;461:43;;;;477:3;461:43;;;;481:8;461:43;;;;490:7;461:43;;;;498:5;461:43;;;;;441:5;:17;447:10;;441:17;;;;;;;;;;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;510:7;523:10;;510:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;510:24:1;;;;;;;;;;;;;;;;;;;;;;540:50;552:10;;563:3;567:8;576:7;584:5;540:50;;;;;;;;;;;;;;;;;;;359:236;;:::o;60:1010::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6:442:-1:-;;108:3;101:4;93:6;89:17;85:27;78:35;75:2;;;126:1;123;116:12;75:2;163:6;150:20;185:65;200:49;242:6;200:49;;;185:65;;;176:74;;270:6;263:5;256:21;306:4;298:6;294:17;339:4;332:5;328:16;374:3;365:6;360:3;356:16;353:25;350:2;;;391:1;388;381:12;350:2;401:41;435:6;430:3;425;401:41;;;68:380;;;;;;;;456:118;;523:46;561:6;548:20;523:46;;;514:55;;508:66;;;;;581:578;;;722:2;710:9;701:7;697:23;693:32;690:2;;;738:1;735;728:12;690:2;801:1;790:9;786:17;773:31;824:18;816:6;813:30;810:2;;;856:1;853;846:12;810:2;876:63;931:7;922:6;911:9;907:22;876:63;;;866:73;;752:193;1004:2;993:9;989:18;976:32;1028:18;1020:6;1017:30;1014:2;;;1060:1;1057;1050:12;1014:2;1080:63;1135:7;1126:6;1115:9;1111:22;1080:63;;;1070:73;;955:194;684:475;;;;;;1166:241;;1270:2;1258:9;1249:7;1245:23;1241:32;1238:2;;;1286:1;1283;1276:12;1238:2;1321:1;1338:53;1383:7;1374:6;1363:9;1359:22;1338:53;;;1328:63;;1300:97;1232:175;;;;;1445:590;;1580:54;1628:5;1580:54;;;1652:6;1647:3;1640:19;1676:4;1671:3;1667:14;1660:21;;1721:56;1771:5;1721:56;;;1798:1;1783:230;1808:6;1805:1;1802:13;1783:230;;;1848:53;1897:3;1888:6;1882:13;1848:53;;;1918:60;1971:6;1918:60;;;1908:70;;2001:4;1996:3;1992:14;1985:21;;1830:1;1827;1823:9;1818:14;;1783:230;;;1787:14;2026:3;2019:10;;1559:476;;;;;;;2043:101;2110:28;2132:5;2110:28;;;2105:3;2098:41;2092:52;;;2151:300;;2253:39;2286:5;2253:39;;;2309:6;2304:3;2297:19;2321:63;2377:6;2370:4;2365:3;2361:14;2354:4;2347:5;2343:16;2321:63;;;2416:29;2438:6;2416:29;;;2409:4;2404:3;2400:14;2396:50;2389:57;;2233:218;;;;;;2458:110;2531:31;2556:5;2531:31;;;2526:3;2519:44;2513:55;;;2575:341;;2733:2;2722:9;2718:18;2710:26;;2783:9;2777:4;2773:20;2769:1;2758:9;2754:17;2747:47;2808:98;2901:4;2892:6;2808:98;;;2800:106;;2704:212;;;;;2923:763;;3177:3;3166:9;3162:19;3154:27;;3192:61;3250:1;3239:9;3235:17;3226:6;3192:61;;;3264:62;3322:2;3311:9;3307:18;3298:6;3264:62;;;3374:9;3368:4;3364:20;3359:2;3348:9;3344:18;3337:48;3399:68;3462:4;3453:6;3399:68;;;3391:76;;3515:9;3509:4;3505:20;3500:2;3489:9;3485:18;3478:48;3540:68;3603:4;3594:6;3540:68;;;3532:76;;3619:57;3671:3;3660:9;3656:19;3647:6;3619:57;;;3148:538;;;;;;;;;3693:256;;3755:2;3749:9;3739:19;;3793:4;3785:6;3781:17;3892:6;3880:10;3877:22;3856:18;3844:10;3841:34;3838:62;3835:2;;;3913:1;3910;3903:12;3835:2;3933:10;3929:2;3922:22;3733:216;;;;;3956:259;;4100:18;4092:6;4089:30;4086:2;;;4132:1;4129;4122:12;4086:2;4176:4;4172:9;4165:4;4157:6;4153:17;4149:33;4141:41;;4205:4;4199;4195:15;4187:23;;4023:192;;;;4224:121;;4333:4;4325:6;4321:17;4310:28;;4302:43;;;;4354:107;;4450:5;4444:12;4434:22;;4428:33;;;;4468:92;;4549:5;4543:12;4533:22;;4527:33;;;;4568:122;;4679:4;4671:6;4667:17;4656:28;;4649:41;;;;4698:92;;4778:5;4771:13;4764:21;4753:32;;4747:43;;;;4797:79;;4866:5;4855:16;;4849:27;;;;4883:79;;4952:5;4941:16;;4935:27;;;;4970:145;5051:6;5046:3;5041;5028:30;5107:1;5098:6;5093:3;5089:16;5082:27;5021:94;;;;5124:268;5189:1;5196:101;5210:6;5207:1;5204:13;5196:101;;;5286:1;5281:3;5277:11;5271:18;5267:1;5262:3;5258:11;5251:39;5232:2;5229:1;5225:10;5220:15;;5196:101;;;5312:6;5309:1;5306:13;5303:2;;;5377:1;5368:6;5363:3;5359:16;5352:27;5303:2;5173:219;;;;;5400:97;;5488:2;5484:7;5479:2;5472:5;5468:14;5464:28;5454:38;;5448:49;;;',
        source:
         'pragma solidity ^0.4.22;\npragma experimental ABIEncoderV2;\n\ncontract ToDo {\n  struct Task{\n    uint id;\n    uint date;\n    string content;\n    string author;\n    bool done;\n  }\n  \n  uint lastTaskId;\n  uint[] taskIds;\n  mapping(uint => Task) tasks;\n  \n  event TaskCreated(uint ,uint ,string, string, bool);\n\n  function ToDo() public{\n  \tlastTaskId = 0;\n  }\n\n  function createTask(string _content, string _author) public{\n  \tlastTaskId++;\n    tasks[lastTaskId] = Task(lastTaskId,now,_content,_author,false);\n    taskIds.push(lastTaskId);\n    TaskCreated(lastTaskId,now,_content,_author,false);\n  }\n\n  function getTask(uint id) taskExists(id) public constant \n    returns(\n      uint,\n      uint,\n      string,\n      string,\n      bool\n    ){\n       return(\n         id,\n         tasks[id].date,\n         tasks[id].content,\n         tasks[id].author,\n         tasks[id].done\n       );\n     }\n  \n  function getTaskId() public constant returns(uint[]) {\n  \treturn taskIds;\n  }\n\n  modifier taskExists(uint id) {\n  \tif(tasks[id].id == 0) {\n         revert();\n    }\n    _;\n  }\n}\n',
        sourcePath: '/home/atharva/BEProject/todo/contracts/ToDo.sol',
        ast: [Object],
        legacyAST: [Object],
        compiler: [Object],
        networks: [Object],
        schemaVersion: '2.0.1',
        updatedAt: '2019-02-16T05:12:04.472Z' },
     setProvider: [Function: bound setProvider],
     new: [Function: bound new],
     at: [Function: bound at],
     deployed: [Function: bound deployed],
     defaults: [Function: bound defaults],
     hasNetwork: [Function: bound hasNetwork],
     isDeployed: [Function: bound isDeployed],
     detectNetwork: [Function: bound detectNetwork],
     setNetwork: [Function: bound setNetwork],
     resetAddress: [Function: bound resetAddress],
     link: [Function: bound link],
     clone: [Function: bound clone],
     addProp: [Function: bound addProp],
     toJSON: [Function: bound toJSON],
     web3:
      Web3 {
        _requestManager: [RequestManager],
        currentProvider: [Provider],
        eth: [Eth],
        db: [DB],
        shh: [Shh],
        net: [Net],
        personal: [Personal],
        bzz: [Swarm],
        settings: [Settings],
        version: [Object],
        providers: [Object],
        _extend: [Function] },
     class_defaults:
      { from: '0x627306090abab3a6e1400e9345bc60c78a8bef57',
        gas: 6721975,
        gasPrice: 100000000000 },
     currentProvider:
      HttpProvider {
        host: 'http://127.0.0.1:9545/',
        timeout: 0,
        user: undefined,
        password: undefined,
        headers: undefined,
        send: [Function],
        sendAsync: [Function],
        _alreadyWrapped: true },
     network_id: '4447' },
  abi:
   [ { inputs: [],
       payable: false,
       stateMutability: 'nonpayable',
       type: 'constructor' },
     { anonymous: false,
       inputs: [Array],
       name: 'TaskCreated',
       type: 'event' },
     { constant: false,
       inputs: [Array],
       name: 'createTask',
       outputs: [],
       payable: false,
       stateMutability: 'nonpayable',
       type: 'function' },
     { constant: true,
       inputs: [Array],
       name: 'getTask',
       outputs: [Array],
       payable: false,
       stateMutability: 'view',
       type: 'function' },
     { constant: true,
       inputs: [],
       name: 'getTaskId',
       outputs: [Array],
       payable: false,
       stateMutability: 'view',
       type: 'function' } ],
  contract:
   Contract {
     _eth:
      Eth {
        _requestManager: [RequestManager],
        getBalance: [Function],
        getStorageAt: [Function],
        getCode: [Function],
        getBlock: [Function],
        getUncle: [Function],
        getCompilers: [Function],
        getBlockTransactionCount: [Function],
        getBlockUncleCount: [Function],
        getTransaction: [Function],
        getTransactionFromBlock: [Function],
        getTransactionReceipt: [Function],
        getTransactionCount: [Function],
        call: [Function],
        estimateGas: [Function],
        sendRawTransaction: [Function],
        signTransaction: [Function],
        sendTransaction: [Function],
        sign: [Function],
        compile: [Object],
        submitWork: [Function],
        getWork: [Function],
        coinbase: [Getter],
        getCoinbase: [Function],
        mining: [Getter],
        getMining: [Function],
        hashrate: [Getter],
        getHashrate: [Function],
        syncing: [Getter],
        getSyncing: [Function],
        gasPrice: [Getter],
        getGasPrice: [Function],
        accounts: [Getter],
        getAccounts: [Function],
        blockNumber: [Getter],
        getBlockNumber: [Function],
        protocolVersion: [Getter],
        getProtocolVersion: [Function],
        iban: [Function],
        sendIBANTransaction: [Function: bound transfer] },
     transactionHash: null,
     address: '0x345ca3e014aaf5dca488057592ee47305d9b3e10',
     abi: [ [Object], [Object], [Object], [Object], [Object] ],
     createTask:
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        'string,string': [Circular] },
     getTask:
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        uint256: [Circular] },
     getTaskId:
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        '': [Circular] },
     allEvents: [Function: bound ],
     TaskCreated:
      { [Function: bound ] 'uint256,uint256,string,string,bool': [Function: bound ] } },
  TaskCreated:
   { [Function: bound ] 'uint256,uint256,string,string,bool': [Function: bound ] },
  createTask:
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  getTask:
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  getTaskId:
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  sendTransaction: [Function],
  send: [Function],
  allEvents: [Function: bound ],
  address: '0x345ca3e014aaf5dca488057592ee47305d9b3e10',
  transactionHash: null }
